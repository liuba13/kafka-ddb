from kafka import KafkaConsumer
import json
import time

print("–°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–π–∫–∏–π Consumer...")

# –°—Ç–≤–æ—Ä—é—î–º–æ consumer –±–µ–∑ JSON deserializer
consumer = KafkaConsumer(
    'clean-power-data',
    bootstrap_servers=['localhost:9092'],
    auto_offset_reset='earliest',
    group_id=f'test-robust-group-{int(time.time())}',  # –£–Ω—ñ–∫–∞–ª—å–Ω–∞ –≥—Ä—É–ø–∞
    enable_auto_commit=True
)

print("–ß–µ–∫–∞—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è... (15 —Å–µ–∫—É–Ω–¥)")

def safe_json_parse(raw_message):
    """–ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–µ—Ä JSON –∑ fallback –Ω–∞ —Ç–µ–∫—Å—Ç"""
    try:
        text_message = raw_message.decode('utf-8')
        # –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —è–∫ JSON
        return json.loads(text_message), 'json'
    except (json.JSONDecodeError, UnicodeDecodeError):
        try:
            # –Ø–∫—â–æ –Ω–µ JSON, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç
            return raw_message.decode('utf-8'), 'text'
        except UnicodeDecodeError:
            return str(raw_message), 'bytes'

import signal

def timeout_handler(signum, frame):
    raise TimeoutError("Timeout!")

signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(15)  # 15 —Å–µ–∫—É–Ω–¥ timeout

message_count = 0
try:
    for message in consumer:
        parsed_value, data_type = safe_json_parse(message.value)
        
        print(f"üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è #{message_count + 1}:")
        print(f"   –¢–∏–ø –¥–∞–Ω–∏—Ö: {data_type}")
        print(f"   –ó–Ω–∞—á–µ–Ω–Ω—è: {parsed_value}")
        print(f"   Topic: {message.topic}")
        print(f"   Partition: {message.partition}")
        print(f"   Offset: {message.offset}")
        print("-" * 50)
        
        message_count += 1
        
        # –ó—É–ø–∏–Ω–∏—Ç–∏—Å—å –ø—ñ—Å–ª—è 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –¥–µ–º–æ
        if message_count >= 5:
            break
            
except TimeoutError:
    print("‚è∞ Timeout - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∏")
except KeyboardInterrupt:
    print("üõë –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")

consumer.close()
print(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–æ {message_count} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")