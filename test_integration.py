#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Kafka + Cassandra –¥–ª—è keyspace energy_kafka_db
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—å–æ–≥–æ pipeline –µ–Ω–µ—Ä–≥–µ—Ç–∏—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
"""

from kafka import KafkaProducer, KafkaConsumer
from cassandra.cluster import Cluster
import json
import time
from datetime import datetime
import uuid
import logging
import sys

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class IntegrationTester:
    """–ö–ª–∞—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó"""
    
    def __init__(self):
        self.kafka_producer = None
        self.kafka_consumer = None
        self.cassandra_cluster = None
        self.cassandra_session = None
        self.keyspace_name = 'energy_kafka_db'  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ keyspace
        self.test_results = {
            'kafka_connection': False,
            'cassandra_connection': False,
            'data_flow': False,
            'data_persistence': False,
            'alerts_generation': False,
            'ttl_configuration': False
        }
    
    def test_kafka_connection(self):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Kafka"""
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Kafka...")
        
        try:
            # –°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ producer
            self.kafka_producer = KafkaProducer(
                bootstrap_servers=['localhost:9092'],
                value_serializer=lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
                request_timeout_ms=10000
            )
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ Kafka
            metadata = self.kafka_producer.bootstrap_connected()
            
            if metadata:
                logger.info("‚úÖ Kafka –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
                self.test_results['kafka_connection'] = True
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–ø—ñ–∫—É
                try:
                    consumer = KafkaConsumer(
                        'NEW-station-data',
                        bootstrap_servers=['localhost:9092'],
                        auto_offset_reset='latest',
                        consumer_timeout_ms=5000,
                        group_id=f'test-group-{int(time.time())}'
                    )
                    
                    logger.info("‚úÖ –¢–æ–ø—ñ–∫ NEW-station-data –¥–æ—Å—Ç—É–ø–Ω–∏–π")
                    consumer.close()
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –∑ —Ç–æ–ø—ñ–∫–æ–º: {e}")
                    logger.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ —Ç–æ–ø—ñ–∫ NEW-station-data —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            else:
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±—Ä–æ–∫–µ—Ä–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Kafka: {e}")
            logger.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ Kafka –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:9092")
            return False
        
        return True
    
    def test_cassandra_connection(self):
        """–¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cassandra"""
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cassandra...")
        
        try:
            # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
            self.cassandra_cluster = Cluster(['127.0.0.1'], port=9042)
            session = self.cassandra_cluster.connect()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–µ—Ä—Å—ñ—ó
            row = session.execute("SELECT release_version FROM system.local").one()
            logger.info(f"‚úÖ Cassandra –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ, –≤–µ—Ä—Å—ñ—è: {row.release_version}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ keyspace
            try:
                session.execute(f"USE {self.keyspace_name}")
                self.cassandra_session = session
                logger.info(f"‚úÖ Keyspace {self.keyspace_name} –¥–æ—Å—Ç—É–ø–Ω–∏–π")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—å
                tables_query = f"""
                    SELECT table_name FROM system_schema.tables 
                    WHERE keyspace_name = '{self.keyspace_name}'
                """
                rows = self.cassandra_session.execute(tables_query)
                tables = [row.table_name for row in rows]
                
                expected_tables = ['power_metrics']  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
                missing_tables = [table for table in expected_tables if table not in tables]
                
                if missing_tables:
                    logger.warning(f"‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ: {missing_tables}")
                    logger.info("üí° –ó–∞–ø—É—Å—Ç—ñ—Ç—å schema_setup.py –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å")
                else:
                    logger.info("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ")
                
                self.test_results['cassandra_connection'] = True
                
            except Exception as keyspace_error:
                logger.error(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –∑ keyspace {self.keyspace_name}: {keyspace_error}")
                logger.info(f"üí° –°—Ç–≤–æ—Ä—ñ—Ç—å keyspace {self.keyspace_name} –≤ cqlsh")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cassandra: {e}")
            logger.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ Cassandra –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ localhost:9042")
            return False
        
        return True
    
    def generate_test_data(self, count=5):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
        test_stations = [
            {"name": "–¢–µ—Å—Ç –¢–ï–° –ö–∏—ó–≤", "type": "thermal", "region": "–ö–∏—ó–≤"},
            {"name": "–¢–µ—Å—Ç –ì–ï–° –î–Ω—ñ–ø—Ä–æ", "type": "hydro", "region": "–î–Ω—ñ–ø—Ä–æ"},
            {"name": "–¢–µ—Å—Ç –°–æ–Ω—è—á–Ω–∞ –õ—å–≤—ñ–≤", "type": "solar", "region": "–õ—å–≤—ñ–≤"}
        ]
        
        test_data = []
        
        for i in range(count):
            station = test_stations[i % len(test_stations)]
            
            # –ì–µ–Ω–µ—Ä—É—î–º–æ –¥–∞–Ω—ñ —â–æ –≤–∏–∫–ª–∏—á—É—Ç—å –∞–ª–µ—Ä—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            if i == 0:  # –ü–µ—Ä—à–∏–π –∑–∞–ø–∏—Å –∑ –∞–ª–µ—Ä—Ç–æ–º –ø–æ –Ω–∞–ø—Ä—É–∑—ñ
                voltage = 215.0  # –ù–∏–∑—å–∫–∞ –Ω–∞–ø—Ä—É–≥–∞
                frequency = 50.0
                power = 500.0
                efficiency = 85.0
            elif i == 1:  # –î—Ä—É–≥–∏–π –∑–∞–ø–∏—Å –∑ –∞–ª–µ—Ä—Ç–æ–º –ø–æ —á–∞—Å—Ç–æ—Ç—ñ
                voltage = 220.0
                frequency = 49.7  # –ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑—å–∫–∞ —á–∞—Å—Ç–æ—Ç–∞
                power = 750.0
                efficiency = 82.0
            else:  # –ù–æ—Ä–º–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
                voltage = 220.5
                frequency = 50.05
                power = 800.0 + (i * 50)
                efficiency = 85.0 + (i * 2)
            
            data = {
                "station_name": station["name"],
                "station_type": station["type"],
                "timestamp": datetime.now().isoformat(),
                "power_output_mw": power,
                "voltage_kv": voltage,
                "frequency_hz": frequency,
                "efficiency_percent": efficiency,
                "kafka_version": "3.7.1",
                "test_id": f"test-{i+1}"
            }
            
            test_data.append(data)
        
        return test_data
    
    def test_data_flow(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Kafka"""
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Kafka...")
        
        if not self.kafka_producer:
            logger.error("‚ùå Producer –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return False
        
        try:
            test_data = self.generate_test_data(3)
            sent_count = 0
            
            for data in test_data:
                try:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –¥–∞–Ω—ñ
                    future = self.kafka_producer.send('NEW-station-data', data)
                    record_metadata = future.get(timeout=10)
                    
                    logger.info(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {data['station_name']} -> "
                              f"Partition {record_metadata.partition}, Offset {record_metadata.offset}")
                    sent_count += 1
                    
                except Exception as send_error:
                    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {send_error}")
            
            if sent_count == len(test_data):
                logger.info(f"‚úÖ –í—Å—ñ {sent_count} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")
                self.test_results['data_flow'] = True
                return True
            else:
                logger.error(f"‚ùå –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ {sent_count} –∑ {len(test_data)} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¥–∞–Ω–∏—Ö: {e}")
            return False
    
    def test_data_persistence(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Cassandra"""
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ Cassandra...")
        
        if not self.cassandra_session:
            logger.error("‚ùå Cassandra session –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π")
            return False
        
        try:
            # –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —â–æ–± –¥–∞–Ω—ñ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –≤ Cassandra
            logger.info("‚è≥ –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö...")
            time.sleep(10)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö
            try:
                # –ü—Ä–æ—Å—Ç—ñ—à–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - –ø—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
                count_result = self.cassandra_session.execute("SELECT COUNT(*) as count FROM power_metrics").one()
                total_records = count_result.count if count_result else 0
                
                logger.info(f"üìä –ó–Ω–∞–π–¥–µ–Ω–æ {total_records} –∑–∞–ø–∏—Å—ñ–≤ –≤ power_metrics")
                
                if total_records > 0:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫–∞ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤
                    recent_query = "SELECT plant_id, timestamp, station_name, power_output_mw FROM power_metrics LIMIT 5"
                    recent_rows = self.cassandra_session.execute(recent_query)
                    
                    logger.info("üìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:")
                    for row in recent_rows:
                        timestamp_str = row.timestamp.strftime('%H:%M:%S') if row.timestamp else 'Unknown'
                        logger.info(f"  ‚Ä¢ {row.station_name}: {row.power_output_mw} –ú–í—Ç ({timestamp_str})")
                    
                    self.test_results['data_persistence'] = True
                    
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–ª–µ—Ä—Ç–∏
                    self.test_alerts_generation()
                    
                    return True
                else:
                    logger.warning("‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Cassandra")
                    logger.info("üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å —â–æ enhanced_consumer.py –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –æ–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ")
                    return False
                    
            except Exception as query_error:
                logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É: {query_error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}")
            return False
    
    def test_alerts_generation(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–ª–µ—Ä—Ç—ñ–≤"""
        logger.info("üîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∞–ª–µ—Ä—Ç—ñ–≤...")
        
        try:
            # –°–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ –∞–ª–µ—Ä—Ç—ñ–≤
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ç–∞–±–ª–∏—Ü—è power_alerts
                tables_query = f"""
                    SELECT table_name FROM system_schema.tables 
                    WHERE keyspace_name = '{self.keyspace_name}' AND table_name = 'power_alerts'
                """
                table_exists = list(self.cassandra_session.execute(tables_query))
                
                if not table_exists:
                    logger.info("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è power_alerts –Ω–µ —ñ—Å–Ω—É—î - —Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                    self.test_results['alerts_generation'] = True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                    return True
                
                # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ plant_id –¥–ª—è –∑–∞–ø–∏—Ç—É –∞–ª–µ—Ä—Ç—ñ–≤
                plants_query = "SELECT DISTINCT plant_id FROM power_alerts LIMIT 5"
                plant_rows = self.cassandra_session.execute(plants_query)
                
                total_alerts = 0
                alert_types = set()
                
                for plant_row in plant_rows:
                    alerts_query = """
                        SELECT alert_type, severity, message FROM power_alerts 
                        WHERE plant_id = ? LIMIT 10
                    """
                    try:
                        alert_rows = self.cassandra_session.execute(alerts_query, [plant_row.plant_id])
                        
                        for alert in alert_rows:
                            total_alerts += 1
                            alert_types.add(alert.alert_type)
                            
                            if total_alerts <= 3:  # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 3 –∞–ª–µ—Ä—Ç–∏
                                logger.info(f"üö® {alert.severity.upper()}: {alert.message}")
                    except Exception as e:
                        logger.debug(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ –¥–ª—è plant_id {plant_row.plant_id}: {e}")
                
                if total_alerts > 0:
                    logger.info(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {total_alerts} –∞–ª–µ—Ä—Ç—ñ–≤ —Ç–∏–ø—ñ–≤: {', '.join(alert_types)}")
                    self.test_results['alerts_generation'] = True
                    return True
                else:
                    logger.info("‚ÑπÔ∏è –ê–ª–µ—Ä—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ —è–∫—â–æ –≤—Å—ñ –¥–∞–Ω—ñ –≤ –Ω–æ—Ä–º—ñ)")
                    self.test_results['alerts_generation'] = True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                    return True
                    
            except Exception as e:
                logger.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—è –∞–ª–µ—Ä—Ç—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                self.test_results['alerts_generation'] = True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤: {e}")
            return False
    
    def test_ttl_configuration(self):
        """–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å TTL"""
        logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å TTL...")
        
        try:
            query = f"""
                SELECT table_name, default_time_to_live 
                FROM system_schema.tables 
                WHERE keyspace_name = '{self.keyspace_name}'
            """
            
            rows = self.cassandra_session.execute(query)
            ttl_configured = False
            table_count = 0
            
            for row in rows:
                table_count += 1
                ttl = row.default_time_to_live
                if ttl and ttl > 0:
                    ttl_configured = True
                    days = ttl // (24 * 60 * 60)
                    logger.info(f"‚úÖ {row.table_name}: TTL {days} –¥–Ω—ñ–≤")
                else:
                    logger.info(f"‚ÑπÔ∏è {row.table_name}: TTL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            
            if table_count == 0:
                logger.warning(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ keyspace {self.keyspace_name}")
            
            if ttl_configured or table_count > 0:
                self.test_results['ttl_configuration'] = True
            
            return ttl_configured or table_count > 0
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ TTL: {e}")
            return False
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—ñ–¥—Å—É–º–∫–æ–≤–æ–≥–æ –∑–≤—ñ—Ç—É"""
        logger.info("\n" + "="*60)
        logger.info("üìã –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –ó–í–Ü–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á")
        logger.info("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        success_rate = (passed_tests / total_tests) * 100
        
        logger.info(f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({success_rate:.1f}%)")
        logger.info("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        test_descriptions = {
            'kafka_connection': '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Kafka',
            'cassandra_connection': '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Cassandra',
            'data_flow': '–ü–æ—Ç—ñ–∫ –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ Kafka',
            'data_persistence': '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Cassandra',
            'alerts_generation': '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–ª–µ—Ä—Ç—ñ–≤',
            'ttl_configuration': '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è TTL'
        }
        
        for test_name, description in test_descriptions.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if self.test_results[test_name] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
            logger.info(f"{status} - {description}")
        
        logger.info("")
        logger.info(f"üóÑÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π keyspace: {self.keyspace_name}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
        if success_rate == 100:
            logger.info("üéâ –í–Ü–î–ú–Ü–ù–ù–û! –í—Å—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ!")
            logger.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:")
            logger.info("   ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å enhanced_consumer.py –¥–ª—è –ø–æ—Å—Ç—ñ–π–Ω–æ—ó —Ä–æ–±–æ—Ç–∏")
            logger.info("   ‚Ä¢ –ú–æ–Ω—ñ—Ç–æ—Ä—å—Ç–µ –ø—Ä–æ—Å—Ç—ñ—Ä –Ω–∞ –¥–∏—Å–∫—É")
            logger.info("   ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–π—Ç–µ backup —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é")
        elif success_rate >= 80:
            logger.info("üëç –î–û–ë–†–ï! –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î")
            logger.info("üí° –¢—Ä–µ–±–∞ –¥–æ–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏:")
            failed_tests = [desc for test, desc in test_descriptions.items() if not self.test_results[test]]
            for failed in failed_tests:
                logger.info(f"   ‚Ä¢ {failed}")
        else:
            logger.info("‚ö†Ô∏è –ü–û–¢–†–Ü–ë–ù–ï –í–¢–†–£–ß–ê–ù–ù–Ø! –ë–∞–≥–∞—Ç–æ —Ç–µ—Å—Ç—ñ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            logger.info("üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:")
            logger.info("   ‚Ä¢ –ß–∏ –∑–∞–ø—É—â–µ–Ω–æ Kafka —Ç–∞ Cassandra?")
            logger.info(f"   ‚Ä¢ –ß–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ keyspace {self.keyspace_name}?")
            logger.info("   ‚Ä¢ –ß–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ –≤—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ?")
            logger.info("   ‚Ä¢ –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –º–µ—Ä–µ–∂—É?")
        
        return success_rate
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            if self.kafka_producer:
                self.kafka_producer.flush()
                self.kafka_producer.close()
            
            if self.cassandra_cluster:
                self.cassandra_cluster.shutdown()
                
            logger.info("üîå –†–µ—Å—É—Ä—Å–∏ –æ—á–∏—â–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó Kafka + Cassandra")
        logger.info(f"üóÑÔ∏è Keyspace: {self.keyspace_name}")
        logger.info("="*70)
        
        try:
            # –ü–æ—Å–ª—ñ–¥–æ–≤–Ω–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
            if not self.test_kafka_connection():
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            if not self.test_cassandra_connection():
                logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: Cassandra –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
                return
            
            # –¢–µ—Å—Ç–∏ –ø–æ—Ç–æ–∫—É –¥–∞–Ω–∏—Ö
            self.test_data_flow()
            self.test_data_persistence()
            self.test_ttl_configuration()
            
            # –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π –∑–≤—ñ—Ç
            success_rate = self.generate_final_report()
            
            return success_rate
            
        except KeyboardInterrupt:
            logger.info("\nüõë –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        finally:
            self.cleanup()

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –Ü–ù–¢–ï–ì–†–ê–¶–Ü–á KAFKA + CASSANDRA")
    print("Keyspace: energy_kafka_db")
    print("=" * 50)
    
    tester = IntegrationTester()
    success_rate = tester.run_full_test()
    
    if success_rate is not None:
        if success_rate >= 90:
            sys.exit(0)  # –£—Å–ø—ñ—Ö
        else:
            sys.exit(1)  # –Ñ –ø—Ä–æ–±–ª–µ–º–∏

if __name__ == "__main__":
    main()